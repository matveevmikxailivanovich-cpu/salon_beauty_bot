# -*- coding: utf-8 -*-
"""
TELEGRAM-–ë–û–¢ –°–ê–õ–û–ù–ê –ö–†–ê–°–û–¢–´
–í–µ—Ä—Å–∏—è –¥–ª—è Render
"""

import asyncio
import logging
import sys
import os
from datetime import datetime, timedelta
from typing import Dict, List
import sqlite3

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
    print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ telegram –Ω–∞–π–¥–µ–Ω–∞")
except ImportError:
    print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot==20.3")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚úÖ –¢–û–ö–ï–ù –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–û–ô –û–ö–†–£–ñ–ï–ù–ò–Ø
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    print("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    sys.exit(1)

print("ü§ñ –ó–ê–ü–£–°–ö –ë–û–¢–ê –°–ê–õ–û–ù–ê –ö–†–ê–°–û–¢–´")
print("üîë –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class UserState:
    MAIN_MENU = "main_menu"
    SELECTING_SERVICE = "selecting_service"
    AWAITING_NAME = "awaiting_name"
    AWAITING_PHONE = "awaiting_phone"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–ª–æ–Ω–∞
SERVICES = {
    "nails": {
        "name": "üíÖ –ù–æ–≥—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å",
        "services": ["–ú–∞–Ω–∏–∫—é—Ä - 1500‚ÇΩ", "–ü–µ–¥–∏–∫—é—Ä - 2000‚ÇΩ", "–ì–µ–ª—å-–ª–∞–∫ - 1200‚ÇΩ"],
        "duration": 90
    },
    "hair": {
        "name": "üíá‚Äç‚ôÄÔ∏è –ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏", 
        "services": ["–°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è - 2500‚ÇΩ", "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ - 4500‚ÇΩ", "–£–∫–ª–∞–¥–∫–∞ - 1500‚ÇΩ"],
        "duration": 120
    },
    "makeup": {
        "name": "üíÑ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –º–∞–∫–∏—è–∂",
        "services": ["–ë—Ä–æ–≤–∏ - 8000‚ÇΩ", "–ì—É–±—ã - 12000‚ÇΩ", "–í–µ–∫–∏ - 10000‚ÇΩ"],
        "duration": 150
    }
}

MASTERS = {
    "nails": ["–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞"],
    "hair": ["–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞", "–û–ª—å–≥–∞ –ö–æ–∑–ª–æ–≤–∞"],
    "makeup": ["–°–≤–µ—Ç–ª–∞–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–∞"]
}

WORK_HOURS = list(range(9, 19))

SALON_INFO = {
    "name": "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã '–≠–ª–µ–≥–∞–Ω—Å'",
    "phone": "+7 (999) 123-45-67", 
    "address": "—É–ª. –ö—Ä–∞—Å–æ—Ç—ã, –¥–æ–º 10"
}

class Database:
    def __init__(self):
        self.init_db()
        print("üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
    
    def init_db(self):
        conn = sqlite3.connect('salon_bot.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                name TEXT,
                phone TEXT,
                registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS appointments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                service_type TEXT,
                master TEXT,
                appointment_date TEXT,
                appointment_time TEXT,
                status TEXT DEFAULT 'active',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def is_user_registered(self, user_id: int) -> bool:
        conn = sqlite3.connect('salon_bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        conn.close()
        return result is not None
    
    def register_user(self, user_id: int, name: str, phone: str):
        conn = sqlite3.connect('salon_bot.db')
        cursor = conn.cursor()
        cursor.execute(
            'INSERT OR REPLACE INTO users (user_id, name, phone) VALUES (?, ?, ?)',
            (user_id, name, phone)
        )
        conn.commit()
        conn.close()
        print(f"üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {name}")
    
    def create_appointment(self, user_id: int, service_type: str, master: str, date: str, time: str):
        conn = sqlite3.connect('salon_bot.db')
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO appointments (user_id, service_type, master, appointment_date, appointment_time) VALUES (?, ?, ?, ?, ?)',
            (user_id, service_type, master, date, time)
        )
        conn.commit()
        conn.close()
        print(f"üìÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: {date} {time}")
    
    def get_user_appointments(self, user_id: int) -> List[Dict]:
        conn = sqlite3.connect('salon_bot.db')
        cursor = conn.cursor()
        cursor.execute(
            'SELECT service_type, master, appointment_date, appointment_time FROM appointments WHERE user_id = ? AND status = "active"',
            (user_id,)
        )
        appointments = cursor.fetchall()
        conn.close()
        
        result = []
        for apt in appointments:
            result.append({
                'service_type': apt[0],
                'master': apt[1],
                'date': apt[2],
                'time': apt[3]
            })
        return result
    
    def is_time_available(self, master: str, date: str, time: str) -> bool:
        conn = sqlite3.connect('salon_bot.db')
        cursor = conn.cursor()
        cursor.execute(
            'SELECT id FROM appointments WHERE master = ? AND appointment_date = ? AND appointment_time = ? AND status = "active"',
            (master, date, time)
        )
        result = cursor.fetchone()
        conn.close()
        return result is None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
db = Database()
user_states = {}
user_data = {}

class SalonBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        print("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
    
    async def keep_alive_ping(self):
        """Keep-alive –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ Render"""
        while True:
            await asyncio.sleep(600)  # –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            print(f"‚è∞ Keep-alive ping: {datetime.now()}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        username = update.effective_user.first_name or "–ì–æ—Å—Ç—å"
        user_states[user_id] = UserState.MAIN_MENU
        
        print(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
        
        welcome_text = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {SALON_INFO['name']}, {username}!\n\n"
            f"üåü –Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
            f"üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É\n"
            f"üìã –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã\n"
            f"üë©‚Äçüíª –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏\n\n"
            f"üìç {SALON_INFO['address']}\n"
            f"üìû {SALON_INFO['phone']}\n\n"
            f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book")],
            [InlineKeyboardButton("üìã –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data="services")],
            [InlineKeyboardButton("üë©‚Äçüíª –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞", callback_data="masters")],
            [InlineKeyboardButton("üéØ –ê–∫—Ü–∏–∏", callback_data="promotions")],
            [InlineKeyboardButton("üì± –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        print(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {data}")
        
        if data == "services":
            await self.show_services(query)
        elif data == "book":
            await self.start_booking(query)
        elif data == "masters":
            await self.show_masters(query)
        elif data == "promotions":
            await self.show_promotions(query)
        elif data == "my_bookings":
            await self.show_user_bookings(query)
        elif data.startswith("service_"):
            await self.select_service(query, data)
        elif data.startswith("date_"):
            await self.select_date(query, data)
        elif data.startswith("time_"):
            await self.select_time(query, data)
        elif data == "back_to_menu":
            await self.back_to_main_menu(query)
    
    async def show_services(self, query):
        text = f"üìã **–£—Å–ª—É–≥–∏ {SALON_INFO['name']}**\n\n"
        
        for service_info in SERVICES.values():
            text += f"**{service_info['name']}**\n"
            for service in service_info['services']:
                text += f"‚Ä¢ {service}\n"
            text += f"‚è± {service_info['duration']} –º–∏–Ω\n\n"
        
        text += f"üìû {SALON_INFO['phone']}\n"
        text += f"üìç {SALON_INFO['address']}"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def start_booking(self, query):
        user_id = query.from_user.id
        user_states[user_id] = UserState.SELECTING_SERVICE
        
        text = "üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:**"
        
        keyboard = [
            [InlineKeyboardButton("üíÖ –ù–æ–≥—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å", callback_data="service_nails")],
            [InlineKeyboardButton("üíá‚Äç‚ôÄÔ∏è –ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏", callback_data="service_hair")],
            [InlineKeyboardButton("üíÑ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –º–∞–∫–∏—è–∂", callback_data="service_makeup")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def select_service(self, query, callback_data):
        user_id = query.from_user.id
        service_type = callback_data.replace("service_", "")
        
        if user_id not in user_data:
            user_data[user_id] = {}
        user_data[user_id]['service_type'] = service_type
        
        service_info = SERVICES[service_type]
        text = f"**{service_info['name']}**\n\n"
        for service in service_info['services']:
            text += f"‚Ä¢ {service}\n"
        text += f"\n‚è± {service_info['duration']} –º–∏–Ω\n\n"
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç
        available_dates = []
        for i in range(1, 8):
            date = datetime.now() + timedelta(days=i)
            if date.weekday() < 6:  # –ü–Ω-–°–±
                available_dates.append(date)
        
        if available_dates:
            text += "üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:**"
            keyboard = []
            for date in available_dates:
                date_str = date.strftime("%Y-%m-%d")
                date_display = date.strftime("%d.%m (%a)")
                days = {'Mon': '–ü–Ω', 'Tue': '–í—Ç', 'Wed': '–°—Ä', 'Thu': '–ß—Ç', 'Fri': '–ü—Ç', 'Sat': '–°–±'}
                for eng, rus in days.items():
                    date_display = date_display.replace(eng, rus)
                keyboard.append([InlineKeyboardButton(date_display, callback_data=f"date_{date_str}")])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="book")])
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            text += "‚ùå **–ù–µ—Ç –¥–∞—Ç**"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def select_date(self, query, callback_data):
        user_id = query.from_user.id
        selected_date = callback_data.replace("date_", "")
        user_data[user_id]['date'] = selected_date
        
        service_type = user_data[user_id]['service_type']
        masters = MASTERS[service_type]
        
        date_obj = datetime.strptime(selected_date, "%Y-%m-%d")
        formatted_date = date_obj.strftime("%d.%m.%Y")
        
        text = f"üìÖ **{formatted_date}**\n‚è∞ **–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:**"
        
        keyboard = []
        for hour in WORK_HOURS:
            time_str = f"{hour:02d}:00"
            available = any(db.is_time_available(master, selected_date, time_str) for master in masters)
            if available:
                keyboard.append([InlineKeyboardButton(time_str, callback_data=f"time_{time_str}")])
        
        if keyboard:
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"service_{service_type}")])
        else:
            text += "\n‚ùå **–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏**"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"service_{service_type}")]]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def select_time(self, query, callback_data):
        user_id = query.from_user.id
        selected_time = callback_data.replace("time_", "")
        user_data[user_id]['time'] = selected_time
        
        if not db.is_user_registered(user_id):
            user_states[user_id] = UserState.AWAITING_NAME
            
            text = (
                f"üìù **–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω—É–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è**\n\n"
                f"üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
            )
            await query.edit_message_text(text, parse_mode='Markdown')
        else:
            await self.confirm_booking(query)
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        text = update.message.text
        
        if user_id not in user_states:
            await self.start_command(update, context)
            return
        
        state = user_states[user_id]
        
        if state == UserState.AWAITING_NAME:
            user_data[user_id]['name'] = text.strip()
            user_states[user_id] = UserState.AWAITING_PHONE
            
            await update.message.reply_text(f"üëç –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {text}!\nüìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        
        elif state == UserState.AWAITING_PHONE:
            user_data[user_id]['phone'] = text.strip()
            
            db.register_user(user_id, user_data[user_id]['name'], user_data[user_id]['phone'])
            await self.complete_booking(update)
    
    async def confirm_booking(self, query):
        user_id = query.from_user.id
        await self._finalize_booking(user_id, query)
    
    async def complete_booking(self, update):
        user_id = update.effective_user.id
        await self._finalize_booking(user_id, update)
        user_states[user_id] = UserState.MAIN_MENU
    
    async def _finalize_booking(self, user_id, update_or_query):
        service_type = user_data[user_id]['service_type']
        date = user_data[user_id]['date']
        time = user_data[user_id]['time']
        
        masters = MASTERS[service_type]
        available_master = None
        for master in masters:
            if db.is_time_available(master, date, time):
                available_master = master
                break
        
        if available_master:
            db.create_appointment(user_id, service_type, available_master, date, time)
            
            date_obj = datetime.strptime(date, "%Y-%m-%d")
            formatted_date = date_obj.strftime("%d.%m.%Y")
            
            text = (
                f"üéâ **–ó–ê–ü–ò–°–¨ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!**\n\n"
                f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {time}\n"
                f"üë©‚Äçüíª –ú–∞—Å—Ç–µ—Ä: {available_master}\n"
                f"üíÖ –£—Å–ª—É–≥–∞: {SERVICES[service_type]['name']}\n\n"
                f"üìç {SALON_INFO['address']}\n"
                f"üìû {SALON_INFO['phone']}\n\n"
                f"‚ú® –ñ–¥–µ–º –≤–∞—Å!"
            )
        else:
            text = "üòî –í—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ."
        
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(update_or_query, 'edit_message_text'):
            await update_or_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update_or_query.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def show_masters(self, query):
        text = f"üë©‚Äçüíª **–ú–∞—Å—Ç–µ—Ä–∞ {SALON_INFO['name']}:**\n\n"
        
        for service_type, masters in MASTERS.items():
            service_name = SERVICES[service_type]['name']
            text += f"**{service_name}:**\n"
            for master in masters:
                text += f"‚Ä¢ {master}\n"
            text += "\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def show_promotions(self, query):
        text = (
            f"üéØ **–ê–∫—Ü–∏–∏ {SALON_INFO['name']}:**\n\n"
            f"üåü –°–∫–∏–¥–∫–∞ 20% –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ\n"
            f"üíÖ –ú–∞–Ω–∏–∫—é—Ä + –ø–µ–¥–∏–∫—é—Ä = —Å–∫–∏–¥–∫–∞ 15%\n"
            f"üëØ‚Äç‚ôÄÔ∏è –ü—Ä–∏–≤–µ–¥–∏ –ø–æ–¥—Ä—É–≥—É - —Å–∫–∏–¥–∫–∞ 10%\n"
            f"üéÇ –í –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è - —Å–∫–∏–¥–∫–∞ 25%\n\n"
            f"üìû –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {SALON_INFO['phone']}"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def show_user_bookings(self, query):
        user_id = query.from_user.id
        appointments = db.get_user_appointments(user_id)
        
        if appointments:
            text = "üì± **–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:**\n\n"
            for apt in appointments:
                service_name = SERVICES[apt['service_type']]['name']
                date_obj = datetime.strptime(apt['date'], "%Y-%m-%d")
                formatted_date = date_obj.strftime("%d.%m.%Y")
                
                text += f"‚Ä¢ {service_name}\n"
                text += f"üìÖ {formatted_date} –≤ {apt['time']}\n"
                text += f"üë©‚Äçüíª {apt['master']}\n\n"
            
            text += f"üìû –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: {SALON_INFO['phone']}"
        else:
            text = "üì± –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π\n\nüìÖ –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def back_to_main_menu(self, query):
        user_id = query.from_user.id
        user_states[user_id] = UserState.MAIN_MENU
        
        text = f"üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é {SALON_INFO['name']}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book")],
            [InlineKeyboardButton("üìã –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data="services")],
            [InlineKeyboardButton("üë©‚Äçüíª –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞", callback_data="masters")],
            [InlineKeyboardButton("üéØ –ê–∫—Ü–∏–∏", callback_data="promotions")],
            [InlineKeyboardButton("üì± –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    def run(self):
        print("ü§ñ –ë–û–¢ –ó–ê–ü–£–©–ï–ù!")
        print("üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ Telegram")
        print("üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
        
        # –ó–∞–ø—É—Å–∫ keep-alive
        async def start_bot():
            await asyncio.gather(
                self.keep_alive_ping(),
                self.application.run_polling()
            )
        
        asyncio.run(start_bot())

def main():
    try:
        print("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        bot = SalonBot()
        bot.run()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:")

if __name__ == '__main__':
    print("üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê...")
    main()
