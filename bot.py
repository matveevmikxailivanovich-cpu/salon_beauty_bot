# -*- coding: utf-8 -*-
"""
TELEGRAM-–ë–û–¢ –°–ê–õ–û–ù–ê –ö–†–ê–°–û–¢–´
–ü–æ–ª–Ω–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
"""

import asyncio
import logging
import sys
from datetime import datetime, timedelta
from typing import Dict, List
import sqlite3

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
    print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ telegram –Ω–∞–π–¥–µ–Ω–∞")
except ImportError:
    print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot==20.3")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚úÖ –í–ê–® –¢–û–ö–ï–ù
BOT_TOKEN = "8215198856:AAFaeNBZnrKig1tU0VR74DoCTHdrXsRKV1U"

print("ü§ñ –ó–ê–ü–£–°–ö –ë–û–¢–ê –°–ê–õ–û–ù–ê –ö–†–ê–°–û–¢–´")
print("üîë –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ ID)
ADMIN_USER_IDS = [412594355, 987654321]  # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class UserState:
    MAIN_MENU = "main_menu"
    SELECTING_SERVICE = "selecting_service"
    AWAITING_NAME = "awaiting_name"
    AWAITING_PHONE = "awaiting_phone"
    ADMIN_SELECTING_DATE = "admin_selecting_date"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–ª–æ–Ω–∞
SERVICES = {
    "nails": {
        "name": "üíÖ –ù–æ–≥—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å",
        "services": ["–ú–∞–Ω–∏–∫—é—Ä - 1500‚ÇΩ", "–ü–µ–¥–∏–∫—é—Ä - 2000‚ÇΩ", "–ì–µ–ª—å-–ª–∞–∫ - 1200‚ÇΩ"],
        "duration": 90
    },
    "hair": {
        "name": "üíá‚Äç‚ôÄÔ∏è –ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏", 
        "services": ["–°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è - 2500‚ÇΩ", "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ - 4500‚ÇΩ", "–£–∫–ª–∞–¥–∫–∞ - 1500‚ÇΩ"],
        "duration": 120
    },
    "makeup": {
        "name": "üíÑ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –º–∞–∫–∏—è–∂",
        "services": ["–ë—Ä–æ–≤–∏ - 8000‚ÇΩ", "–ì—É–±—ã - 12000‚ÇΩ", "–í–µ–∫–∏ - 10000‚ÇΩ"],
        "duration": 150
    }
}

MASTERS = {
    "nails": ["–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞"],
    "hair": ["–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞", "–û–ª—å–≥–∞ –ö–æ–∑–ª–æ–≤–∞"],
    "makeup": ["–°–≤–µ—Ç–ª–∞–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–∞"]
}

WORK_HOURS = list(range(9, 19))

SALON_INFO = {
    "name": "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã '–≠–ª–µ–≥–∞–Ω—Å'",
    "phone": "+7 (999) 123-45-67", 
    "address": "—É–ª. –ö—Ä–∞—Å–æ—Ç—ã, –¥–æ–º 10"
}

class Database:
    def __init__(self):
        self.init_db()
        print("üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
    
    def init_db(self):
        conn = sqlite3.connect('salon_bot.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                name TEXT,
                phone TEXT,
                registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS appointments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                service_type TEXT,
                master TEXT,
                appointment_date TEXT,
                appointment_time TEXT,
                status TEXT DEFAULT 'active',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def is_user_registered(self, user_id: int) -> bool:
        conn = sqlite3.connect('salon_bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        conn.close()
        return result is not None
    
    def register_user(self, user_id: int, name: str, phone: str):
        conn = sqlite3.connect('salon_bot.db')
        cursor = conn.cursor()
        cursor.execute(
            'INSERT OR REPLACE INTO users (user_id, name, phone) VALUES (?, ?, ?)',
            (user_id, name, phone)
        )
        conn.commit()
        conn.close()
        print(f"üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {name}")
    
    def create_appointment(self, user_id: int, service_type: str, master: str, date: str, time: str):
        conn = sqlite3.connect('salon_bot.db')
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO appointments (user_id, service_type, master, appointment_date, appointment_time) VALUES (?, ?, ?, ?, ?)',
            (user_id, service_type, master, date, time)
        )
        conn.commit()
        conn.close()
        print(f"üìÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: {date} {time}")
    
    def get_user_appointments(self, user_id: int) -> List[Dict]:
        conn = sqlite3.connect('salon_bot.db')
        cursor = conn.cursor()
        cursor.execute(
            'SELECT service_type, master, appointment_date, appointment_time FROM appointments WHERE user_id = ? AND status = "active"',
            (user_id,)
        )
        appointments = cursor.fetchall()
        conn.close()
        
        result = []
        for apt in appointments:
            result.append({
                'service_type': apt[0],
                'master': apt[1],
                'date': apt[2],
                'time': apt[3]
            })
        return result
    
    def get_appointments_by_date(self, date: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
        conn = sqlite3.connect('salon_bot.db')
        cursor = conn.cursor()
        cursor.execute(
            '''SELECT a.*, u.name as user_name, u.phone 
               FROM appointments a 
               LEFT JOIN users u ON a.user_id = u.user_id 
               WHERE a.appointment_date = ? 
               ORDER BY a.appointment_time ASC''',
            (date,)
        )
        appointments = cursor.fetchall()
        conn.close()
        
        result = []
        for apt in appointments:
            result.append({
                'id': apt[0],
                'user_id': apt[1],
                'service_type': apt[2],
                'master': apt[3],
                'appointment_date': apt[4],
                'appointment_time': apt[5],
                'status': apt[6],
                'created_at': apt[7],
                'user_name': apt[8],
                'phone': apt[9]
            })
        return result
    
    def is_time_available(self, master: str, date: str, time: str) -> bool:
        conn = sqlite3.connect('salon_bot.db')
        cursor = conn.cursor()
        cursor.execute(
            'SELECT id FROM appointments WHERE master = ? AND appointment_date = ? AND appointment_time = ? AND status = "active"',
            (master, date, time)
        )
        result = cursor.fetchone()
        conn.close()
        return result is None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
db = Database()
user_states = {}
user_data = {}

class SalonBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        print("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("schedule", self.schedule_command))
        self.application.add_handler(CommandHandler("today", self.today_schedule))
        self.application.add_handler(CommandHandler("tomorrow", self.tomorrow_schedule))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        username = update.effective_user.first_name or "–ì–æ—Å—Ç—å"
        user_states[user_id] = UserState.MAIN_MENU
        
        print(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
        
        welcome_text = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {SALON_INFO['name']}, {username}!\n\n"
            f"üåü –Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
            f"üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É\n"
            f"üìã –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã\n"
            f"üë©‚Äçüíª –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏\n\n"
            f"üìç {SALON_INFO['address']}\n"
            f"üìû {SALON_INFO['phone']}\n\n"
            f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if user_id in ADMIN_USER_IDS:
            welcome_text += f"\n\nüîß **–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n"
            welcome_text += f"/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–∞—Ç—É\n"
            welcome_text += f"/today - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            welcome_text += f"/tomorrow - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book")],
            [InlineKeyboardButton("üìã –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data="services")],
            [InlineKeyboardButton("üë©‚Äçüíª –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞", callback_data="masters")],
            [InlineKeyboardButton("üéØ –ê–∫—Ü–∏–∏", callback_data="promotions")],
            [InlineKeyboardButton("üì± –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if user_id in ADMIN_USER_IDS:
            keyboard.append([InlineKeyboardButton("üîß –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞", callback_data="admin_schedule")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def schedule_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É"""
        user_id = update.effective_user.id
        username = update.effective_user.first_name or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user_id not in ADMIN_USER_IDS:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n"
                "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∞–ª–æ–Ω–∞."
            )
            return
        
        user_states[user_id] = UserState.ADMIN_SELECTING_DATE
        
        print(f"üìã –ó–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç: {username}")
        
        text = (
            f"üìã **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞**\n\n"
            f"üëã {username}, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π:\n\n"
            f"üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã:"
        )
        
        keyboard = await self.generate_date_keyboard()
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def today_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_USER_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
            return
        
        today = datetime.now().strftime("%Y-%m-%d")
        
        # –°–æ–∑–¥–∞–µ–º fake query –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –º–µ—Ç–æ–¥–æ–º
        class FakeQuery:
            def __init__(self, message):
                self.message = message
            
            async def edit_message_text(self, text, reply_markup=None, parse_mode=None):
                await self.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        
        fake_query = FakeQuery(update.message)
        await self.show_day_schedule(fake_query, today)
    
    async def tomorrow_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_USER_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
            return
        
        tomorrow = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
        
        class FakeQuery:
            def __init__(self, message):
                self.message = message
            
            async def edit_message_text(self, text, reply_markup=None, parse_mode=None):
                await self.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        
        fake_query = FakeQuery(update.message)
        await self.show_day_schedule(fake_query, tomorrow)
    
    async def generate_date_keyboard(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–∞—Ç–∞–º–∏"""
        keyboard = []
        today = datetime.now()
        
        for i in range(0, 8):
            date = today + timedelta(days=i)
            date_str = date.strftime("%Y-%m-%d")
            
            if i == 0:
                date_display = f"üìÖ –°–µ–≥–æ–¥–Ω—è ({date.strftime('%d.%m')})"
            elif i == 1:
                date_display = f"üìÖ –ó–∞–≤—Ç—Ä–∞ ({date.strftime('%d.%m')})"
            else:
                date_display = date.strftime("%d.%m (%a)")
                days = {'Mon': '–ü–Ω', 'Tue': '–í—Ç', 'Wed': '–°—Ä', 'Thu': '–ß—Ç', 'Fri': '–ü—Ç', 'Sat': '–°–±', 'Sun': '–í—Å'}
                for eng, rus in days.items():
                    date_display = date_display.replace(eng, rus)
            
            keyboard.append([InlineKeyboardButton(date_display, callback_data=f"admin_date_{date_str}")])
        
        keyboard.append([InlineKeyboardButton("üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data="admin_more_dates")])
        return keyboard
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        print(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {data}")
        
        if data == "services":
            await self.show_services(query)
        elif data == "book":
            await self.start_booking(query)
        elif data == "masters":
            await self.show_masters(query)
        elif data == "promotions":
            await self.show_promotions(query)
        elif data == "my_bookings":
            await self.show_user_bookings(query)
        elif data == "admin_schedule":
            await self.schedule_command_inline(query)
        elif data.startswith("admin_date_"):
            selected_date = data.replace("admin_date_", "")
            await self.show_day_schedule(query, selected_date)
        elif data == "admin_more_dates":
            await self.show_more_admin_dates(query)
        elif data == "admin_select_date":
            await self.schedule_command_inline(query)
        elif data.startswith("admin_stats_"):
            selected_date = data.replace("admin_stats_", "")
            await self.show_date_statistics(query, selected_date)
        elif data.startswith("service_"):
            await self.select_service(query, data)
        elif data.startswith("date_"):
            await self.select_date(query, data)
        elif data.startswith("time_"):
            await self.select_time(query, data)
        elif data == "back_to_menu":
            await self.back_to_main_menu(query)
    
    async def schedule_command_inline(self, query):
        """–ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user_id not in ADMIN_USER_IDS:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
            return
            
        user_states[user_id] = UserState.ADMIN_SELECTING_DATE
        
        text = "üìã **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞**\n\nüìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:"
        
        keyboard = await self.generate_date_keyboard()
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def show_day_schedule(self, query, selected_date):
        """–ü–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
        try:
            date_obj = datetime.strptime(selected_date, "%Y-%m-%d")
            formatted_date = date_obj.strftime("%d.%m.%Y")
            day_name = date_obj.strftime("%A")
            
            # –ü–µ—Ä–µ–≤–æ–¥ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            days_ru = {
                'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '–°—Ä–µ–¥–∞',
                'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥', 'Friday': '–ü—è—Ç–Ω–∏—Ü–∞', 'Saturday': '–°—É–±–±–æ—Ç–∞', 'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
            }
            day_name_ru = days_ru.get(day_name, day_name)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –¥–∞—Ç—É
            appointments = db.get_appointments_by_date(selected_date)
            
            text = f"üìã **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {formatted_date}**\n"
            text += f"üìÖ {day_name_ru}\n\n"
            
            if appointments:
                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                schedule_by_time = {}
                for apt in appointments:
                    time_key = apt['appointment_time']
                    if time_key not in schedule_by_time:
                        schedule_by_time[time_key] = []
                    schedule_by_time[time_key].append(apt)
                
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                sorted_times = sorted(schedule_by_time.keys())
                
                text += f"üìä **–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(appointments)}**\n\n"
                
                for time_slot in sorted_times:
                    text += f"üïê **{time_slot}**\n"
                    for apt in schedule_by_time[time_slot]:
                        service_name = SERVICES.get(apt['service_type'], {}).get('name', apt['service_type'])
                        
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
                        client_name = apt.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                        if not client_name or client_name == 'None':
                            client_name = f"ID: {apt['user_id']}"
                        
                        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
                        status_emoji = "‚úÖ" if apt['status'] == 'active' else "‚ùå"
                        
                        text += f"   {status_emoji} {client_name}\n"
                        text += f"   üë©‚Äçüíª {apt['master']}\n"
                        text += f"   üíÖ {service_name}\n"
                        
                        # –ü–æ–∫–∞–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                        if apt.get('phone'):
                            text += f"   üìû {apt['phone']}\n"
                        
                        text += "\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º
                master_stats = {}
                for apt in appointments:
                    if apt['status'] == 'active':
                        master = apt['master']
                        master_stats[master] = master_stats.get(master, 0) + 1
                
                if master_stats:
                    text += "üìà **–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤:**\n"
                    for master, count in sorted(master_stats.items(), key=lambda x: x[1], reverse=True):
                        text += f"üë©‚Äçüíª {master}: {count} –∑–∞–ø–∏—Å–µ–π\n"
            else:
                text += "üì≠ **–ù–∞ —ç—Ç—É –¥–∞—Ç—É –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç**\n\n"
                text += "‚ú® –°–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏"
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = [
                [InlineKeyboardButton("üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data="admin_select_date")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"admin_stats_{selected_date}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(error_text, reply_markup=reply_markup)
    
    async def show_more_admin_dates(self, query):
        """–ü–æ–∫–∞–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        text = "üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:**"
        
        keyboard = []
        today = datetime.now()
        for i in range(8, 22):
            date = today + timedelta(days=i)
            date_str = date.strftime("%Y-%m-%d")
            date_display = date.strftime("%d.%m (%a)")
            
            days = {'Mon': '–ü–Ω', 'Tue': '–í—Ç', 'Wed': '–°—Ä', 'Thu': '–ß—Ç', 'Fri': '–ü—Ç', 'Sat': '–°–±', 'Sun': '–í—Å'}
            for eng, rus in days.items():
                date_display = date_display.replace(eng, rus)
            
            keyboard.append([InlineKeyboardButton(date_display, callback_data=f"admin_date_{date_str}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ü–µ—Ä–≤—ã–µ –¥–∞—Ç—ã", callback_data="admin_select_date")])
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def show_date_statistics(self, query, selected_date):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∞—Ç–µ"""
        try:
            date_obj = datetime.strptime(selected_date, "%Y-%m-%d")
            formatted_date = date_obj.strftime("%d.%m.%Y")
            
            appointments = db.get_appointments_by_date(selected_date)
            
            text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ {formatted_date}**\n\n"
            
            if appointments:
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                active_count = len([apt for apt in appointments if apt['status'] == 'active'])
                cancelled_count = len([apt for apt in appointments if apt['status'] == 'cancelled'])
                
                text += f"üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {active_count}\n"
                text += f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {cancelled_count}\n"
                text += f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(appointments)}\n\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å–ª—É–≥–∞–º
                services_stats = {}
                for apt in appointments:
                    if apt['status'] == 'active':
                        service_type = apt['service_type']
                        service_name = SERVICES.get(service_type, {}).get('name', service_type)
                        services_stats[service_name] = services_stats.get(service_name, 0) + 1
                
                if services_stats:
                    text += f"üíÖ **–ü–æ —É—Å–ª—É–≥–∞–º:**\n"
                    for service, count in sorted(services_stats.items(), key=lambda x: x[1], reverse=True):
                        text += f"‚Ä¢ {service}: {count}\n"
                    text += "\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º
                masters_stats = {}
                for apt in appointments:
                    if apt['status'] == 'active':
                        master = apt['master']
                        masters_stats[master] = masters_stats.get(master, 0) + 1
                
                if masters_stats:
                    text += f"üë©‚Äçüíª **–ü–æ –º–∞—Å—Ç–µ—Ä–∞–º:**\n"
                    for master, count in sorted(masters_stats.items(), key=lambda x: x[1], reverse=True):
                        text += f"‚Ä¢ {master}: {count} –∑–∞–ø–∏—Å–µ–π\n"
                    text += "\n"
                
                # –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                time_stats = {}
                for apt in appointments:
                    if apt['status'] == 'active':
                        hour = apt['appointment_time'].split(':')[0]
                        time_stats[hour] = time_stats.get(hour, 0) + 1
                
                if time_stats:
                    text += f"üïê **–ü–æ –≤—Ä–µ–º–µ–Ω–∏:**\n"
                    for hour in sorted(time_stats.keys()):
                        text += f"‚Ä¢ {hour}:00 - {time_stats[hour]} –∑–∞–ø–∏—Å–µ–π\n"
            else:
                text += "üì≠ –ù–∞ —ç—Ç—É –¥–∞—Ç—É –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç"
            
            keyboard = [
                [InlineKeyboardButton("üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"admin_date_{selected_date}")],
                [InlineKeyboardButton("üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data="admin_select_date")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(error_text, reply_markup=reply_markup)
    
    async def show_services(self, query):
        text = f"üìã **–£—Å–ª—É–≥–∏ {SALON_INFO['name']}**\n\n"
        
        for service_info in SERVICES.values():
            text += f"**{service_info['name']}**\n"
            for service in service_info['services']:
                text += f"‚Ä¢ {service}\n"
            text += f"‚è± {service_info['duration']} –º–∏–Ω\n\n"
        
        text += f"üìû {SALON_INFO['phone']}\n"
        text += f"üìç {SALON_INFO['address']}"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def start_booking(self, query):
        user_id = query.from_user.id
        user_states[user_id] = UserState.SELECTING_SERVICE
        
        text = "üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:**"
        
        keyboard = [
            [InlineKeyboardButton("üíÖ –ù–æ–≥—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å", callback_data="service_nails")],
            [InlineKeyboardButton("üíá‚Äç‚ôÄÔ∏è –ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏", callback_data="service_hair")],
            [InlineKeyboardButton("üíÑ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –º–∞–∫–∏—è–∂", callback_data="service_makeup")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def select_service(self, query, callback_data):
        user_id = query.from_user.id
        service_type = callback_data.replace("service_", "")
        
        if user_id not in user_data:
            user_data[user_id] = {}
        user_data[user_id]['service_type'] = service_type
        
        service_info = SERVICES[service_type]
        text = f"**{service_info['name']}**\n\n"
        for service in service_info['services']:
            text += f"‚Ä¢ {service}\n"
        text += f"\n‚è± {service_info['duration']} –º–∏–Ω\n\n"
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç
        available_dates = []
        for i in range(1, 8):
            date = datetime.now() + timedelta(days=i)
            if date.weekday() < 6:  # –ü–Ω-–°–±
                available_dates.append(date)
        
        if available_dates:
            text += "üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:**"
            keyboard = []
            for date in available_dates:
                date_str = date.strftime("%Y-%m-%d")
                date_display = date.strftime("%d.%m (%a)")
                days = {'Mon': '–ü–Ω', 'Tue': '–í—Ç', 'Wed': '–°—Ä', 'Thu': '–ß—Ç', 'Fri': '–ü—Ç', 'Sat': '–°–±'}
                for eng, rus in days.items():
                    date_display = date_display.replace(eng, rus)
                keyboard.append([InlineKeyboardButton(date_display, callback_data=f"date_{date_str}")])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="book")])
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            text += "‚ùå **–ù–µ—Ç –¥–∞—Ç**"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def select_date(self, query, callback_data):
        user_id = query.from_user.id
        selected_date = callback_data.replace("date_", "")
        user_data[user_id]['date'] = selected_date
        
        service_type = user_data[user_id]['service_type']
        masters = MASTERS[service_type]
        
        date_obj = datetime.strptime(selected_date, "%Y-%m-%d")
        formatted_date = date_obj.strftime("%d.%m.%Y")
        
        text = f"üìÖ **{formatted_date}**\n‚è∞ **–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:**"
        
        keyboard = []
        for hour in WORK_HOURS:
            time_str = f"{hour:02d}:00"
            available = any(db.is_time_available(master, selected_date, time_str) for master in masters)
            if available:
                keyboard.append([InlineKeyboardButton(time_str, callback_data=f"time_{time_str}")])
        
        if keyboard:
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"service_{service_type}")])
        else:
            text += "\n‚ùå **–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏**"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"service_{service_type}")]]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def select_time(self, query, callback_data):
        user_id = query.from_user.id
        selected_time = callback_data.replace("time_", "")
        user_data[user_id]['time'] = selected_time
        
        if not db.is_user_registered(user_id):
            user_states[user_id] = UserState.AWAITING_NAME
            
            text = (
                f"üìù **–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω—É–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è**\n\n"
                f"üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
            )
            await query.edit_message_text(text, parse_mode='Markdown')
        else:
            await self.confirm_booking(query)
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        text = update.message.text
        
        if user_id not in user_states:
            await self.start_command(update, context)
            return
        
        state = user_states[user_id]
        
        if state == UserState.AWAITING_NAME:
            user_data[user_id]['name'] = text.strip()
            user_states[user_id] = UserState.AWAITING_PHONE
            
            await update.message.reply_text(f"üëç –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {text}!\nüìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        
        elif state == UserState.AWAITING_PHONE:
            user_data[user_id]['phone'] = text.strip()
            
            db.register_user(user_id, user_data[user_id]['name'], user_data[user_id]['phone'])
            await self.complete_booking(update)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        elif text.lower() in ['—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–≥—Ä–∞—Ñ–∏–∫', '–∑–∞–ø–∏—Å–∏']:
            # –°–æ–∑–¥–∞–µ–º fake update –¥–ª—è –∫–æ–º–∞–Ω–¥—ã schedule
            class FakeUpdate:
                def __init__(self, original_update):
                    self.effective_user = original_update.effective_user
                    self.message = original_update.message
            
            fake_update = FakeUpdate(update)
            await self.schedule_command(fake_update, context)
    
    async def confirm_booking(self, query):
        user_id = query.from_user.id
        await self._finalize_booking(user_id, query)
    
    async def complete_booking(self, update):
        user_id = update.effective_user.id
        await self._finalize_booking(user_id, update)
        user_states[user_id] = UserState.MAIN_MENU
    
    async def _finalize_booking(self, user_id, update_or_query):
        service_type = user_data[user_id]['service_type']
        date = user_data[user_id]['date']
        time = user_data[user_id]['time']
        
        masters = MASTERS[service_type]
        available_master = None
        for master in masters:
            if db.is_time_available(master, date, time):
                available_master = master
                break
        
        if available_master:
            db.create_appointment(user_id, service_type, available_master, date, time)
            
            date_obj = datetime.strptime(date, "%Y-%m-%d")
            formatted_date = date_obj.strftime("%d.%m.%Y")
            
            text = (
                f"üéâ **–ó–ê–ü–ò–°–¨ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!**\n\n"
                f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {time}\n"
                f"üë©‚Äçüíª –ú–∞—Å—Ç–µ—Ä: {available_master}\n"
                f"üíÖ –£—Å–ª—É–≥–∞: {SERVICES[service_type]['name']}\n\n"
                f"üìç {SALON_INFO['address']}\n"
                f"üìû {SALON_INFO['phone']}\n\n"
                f"‚ú® –ñ–¥–µ–º –≤–∞—Å!"
            )
        else:
            text = "üòî –í—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ."
        
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(update_or_query, 'edit_message_text'):
            await update_or_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update_or_query.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def show_masters(self, query):
        text = f"üë©‚Äçüíª **–ú–∞—Å—Ç–µ—Ä–∞ {SALON_INFO['name']}:**\n\n"
        
        for service_type, masters in MASTERS.items():
            service_name = SERVICES[service_type]['name']
            text += f"**{service_name}:**\n"
            for master in masters:
                text += f"‚Ä¢ {master}\n"
            text += "\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def show_promotions(self, query):
        text = (
            f"üéØ **–ê–∫—Ü–∏–∏ {SALON_INFO['name']}:**\n\n"
            f"üåü –°–∫–∏–¥–∫–∞ 20% –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ\n"
            f"üíÖ –ú–∞–Ω–∏–∫—é—Ä + –ø–µ–¥–∏–∫—é—Ä = —Å–∫–∏–¥–∫–∞ 15%\n"
            f"üëØ‚Äç‚ôÄÔ∏è –ü—Ä–∏–≤–µ–¥–∏ –ø–æ–¥—Ä—É–≥—É - —Å–∫–∏–¥–∫–∞ 10%\n"
            f"üéÇ –í –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è - —Å–∫–∏–¥–∫–∞ 25%\n\n"
            f"üìû –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {SALON_INFO['phone']}"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def show_user_bookings(self, query):
        user_id = query.from_user.id
        appointments = db.get_user_appointments(user_id)
        
        if appointments:
            text = "üì± **–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:**\n\n"
            for apt in appointments:
                service_name = SERVICES[apt['service_type']]['name']
                date_obj = datetime.strptime(apt['date'], "%Y-%m-%d")
                formatted_date = date_obj.strftime("%d.%m.%Y")
                
                text += f"‚Ä¢ {service_name}\n"
                text += f"üìÖ {formatted_date} –≤ {apt['time']}\n"
                text += f"üë©‚Äçüíª {apt['master']}\n\n"
            
            text += f"üìû –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: {SALON_INFO['phone']}"
        else:
            text = "üì± –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π\n\nüìÖ –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def back_to_main_menu(self, query):
        user_id = query.from_user.id
        user_states[user_id] = UserState.MAIN_MENU
        
        text = f"üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é {SALON_INFO['name']}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book")],
            [InlineKeyboardButton("üìã –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data="services")],
            [InlineKeyboardButton("üë©‚Äçüíª –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞", callback_data="masters")],
            [InlineKeyboardButton("üéØ –ê–∫—Ü–∏–∏", callback_data="promotions")],
            [InlineKeyboardButton("üì± –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if user_id in ADMIN_USER_IDS:
            keyboard.append([InlineKeyboardButton("üîß –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞", callback_data="admin_schedule")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    def run(self):
    logger.info("ü§ñ –ë–û–¢ –ó–ê–ü–£–©–ï–ù!")  ‚úÖ 4 –ø—Ä–æ–±–µ–ª–∞ –æ—Ç—Å—Ç—É–ø!
    logger.info("üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ Telegram")
    logger.info("üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    self.application.run_polling(
        poll_interval=0.0,
        timeout=10,
        bootstrap_retries=-1,
        read_timeout=2,
        write_timeout=None,
        connect_timeout=None,
        pool_timeout=None,
    )
def main():
    try:
        print("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        bot = SalonBot()
        bot.run()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    print("üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê...")

    main()


