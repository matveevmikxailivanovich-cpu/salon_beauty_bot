# -*- coding: utf-8 -*-
"""
TELEGRAM-–ë–û–¢ –°–ê–õ–û–ù–ê –ö–†–ê–°–û–¢–´ –î–õ–Ø RENDER v2.0
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ webhook –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
"""

import asyncio
import logging
import sys
import os
from datetime import datetime, timedelta
from typing import Dict, List
import sqlite3
import signal

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
    print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ telegram –Ω–∞–π–¥–µ–Ω–∞")
except ImportError:
    print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot==20.7")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Render
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', "8215198856:AAFaeNBZnrKig1tU0VR74DoCTHdrXsRKV1U")
WEBHOOK_URL = os.getenv('WEBHOOK_URL', None)  # –î–ª—è webhook —Ä–µ–∂–∏–º–∞
PORT = int(os.getenv('PORT', 8443))  # –ü–æ—Ä—Ç –¥–ª—è webhook
USE_WEBHOOK = os.getenv('USE_WEBHOOK', 'false').lower() == 'true'

print("ü§ñ TELEGRAM-–ë–û–¢ –°–ê–õ–û–ù–ê –ö–†–ê–°–û–¢–´ v2.0")
print(f"üîë –¢–æ–∫–µ–Ω: {BOT_TOKEN[:20]}...")
print(f"üåê Webhook: {'–í–∫–ª—é—á–µ–Ω' if USE_WEBHOOK else '–û—Ç–∫–ª—é—á–µ–Ω'}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
shutdown_event = asyncio.Event()

class UserState:
    MAIN_MENU = "main_menu"
    SELECTING_SERVICE = "selecting_service"
    AWAITING_NAME = "awaiting_name"
    AWAITING_PHONE = "awaiting_phone"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–ª–æ–Ω–∞
SERVICES = {
    "nails": {
        "name": "üíÖ –ù–æ–≥—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å",
        "services": ["–ú–∞–Ω–∏–∫—é—Ä - 1500‚ÇΩ", "–ü–µ–¥–∏–∫—é—Ä - 2000‚ÇΩ", "–ì–µ–ª—å-–ª–∞–∫ - 1200‚ÇΩ"],
        "duration": 90
    },
    "hair": {
        "name": "üíá‚Äç‚ôÄÔ∏è –ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏", 
        "services": ["–°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è - 2500‚ÇΩ", "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ - 4500‚ÇΩ", "–£–∫–ª–∞–¥–∫–∞ - 1500‚ÇΩ"],
        "duration": 120
    },
    "makeup": {
        "name": "üíÑ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –º–∞–∫–∏—è–∂",
        "services": ["–ë—Ä–æ–≤–∏ - 8000‚ÇΩ", "–ì—É–±—ã - 12000‚ÇΩ", "–í–µ–∫–∏ - 10000‚ÇΩ"],
        "duration": 150
    }
}

MASTERS = {
    "nails": ["–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞"],
    "hair": ["–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞", "–û–ª—å–≥–∞ –ö–æ–∑–ª–æ–≤–∞"],
    "makeup": ["–°–≤–µ—Ç–ª–∞–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–∞"]
}

WORK_HOURS = list(range(9, 19))

SALON_INFO = {
    "name": "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã '–≠–ª–µ–≥–∞–Ω—Å'",
    "phone": "+7 (999) 123-45-67", 
    "address": "—É–ª. –ö—Ä–∞—Å–æ—Ç—ã, –¥–æ–º 10"
}

class Database:
    def __init__(self):
        self.db_path = os.getenv('DATABASE_PATH', '/tmp/salon_bot.db')
        self.init_db()
        logger.info(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞: {self.db_path}")
    
    def init_db(self):
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    name TEXT,
                    phone TEXT,
                    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS appointments (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    service_type TEXT,
                    master TEXT,
                    appointment_date TEXT,
                    appointment_time TEXT,
                    status TEXT DEFAULT 'active',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_appointments_date ON appointments(appointment_date)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_appointments_master ON appointments(master)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_appointments_user ON appointments(user_id)')
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise
    
    def is_user_registered(self, user_id: int) -> bool:
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            conn.close()
            return result is not None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def register_user(self, user_id: int, name: str, phone: str):
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                'INSERT OR REPLACE INTO users (user_id, name, phone) VALUES (?, ?, ?)',
                (user_id, name, phone)
            )
            conn.commit()
            conn.close()
            logger.info(f"üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} (ID: {user_id})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    def create_appointment(self, user_id: int, service_type: str, master: str, date: str, time: str):
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                'INSERT INTO appointments (user_id, service_type, master, appointment_date, appointment_time) VALUES (?, ?, ?, ?, ?)',
                (user_id, service_type, master, date, time)
            )
            appointment_id = cursor.lastrowid
            conn.commit()
            conn.close()
            logger.info(f"üìÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å #{appointment_id}: {date} {time} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return appointment_id
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
            return None
    
    def get_user_appointments(self, user_id: int) -> List[Dict]:
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                '''SELECT service_type, master, appointment_date, appointment_time 
                   FROM appointments 
                   WHERE user_id = ? AND status = "active"
                   ORDER BY appointment_date, appointment_time''',
                (user_id,)
            )
            appointments = cursor.fetchall()
            conn.close()
            
            result = []
            for apt in appointments:
                result.append({
                    'service_type': apt[0],
                    'master': apt[1],
                    'date': apt[2],
                    'time': apt[3]
                })
            return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []
    
    def is_time_available(self, master: str, date: str, time: str) -> bool:
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                '''SELECT id FROM appointments 
                   WHERE master = ? AND appointment_date = ? AND appointment_time = ? AND status = "active"''',
                (master, date, time)
            )
            result = cursor.fetchone()
            conn.close()
            return result is None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
db = Database()
user_states = {}
user_data = {}

class SalonBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        logger.info("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def setup_handlers(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ update: {context.error}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
        if update and update.effective_user:
            try:
                await context.bot.send_message(
                    chat_id=update.effective_user.id,
                    text="üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = (
            f"üÜò **–ü–æ–º–æ—â—å - {SALON_INFO['name']}**\n\n"
            f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            f"/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            f"/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            f"/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n"
            f"**–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:**\n"
            f"üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã\n"
            f"üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —É—Å–ª—É–≥ –∏ —Ü–µ–Ω\n"
            f"üë©‚Äçüíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–∞—Ö\n"
            f"üéØ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏\n"
            f"üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏\n\n"
            f"üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: {SALON_INFO['phone']}"
        )
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
            conn = sqlite3.connect(db.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM users')
            users_count = cursor.fetchone()[0]
            cursor.execute('SELECT COUNT(*) FROM appointments WHERE status = "active"')
            appointments_count = cursor.fetchone()[0]
            conn.close()
            
            status_text = (
                f"ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**\n\n"
                f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n"
                f"üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
                f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {appointments_count}\n"
                f"üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
                f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
                f"üåê –†–µ–∂–∏–º: {'Webhook' if USE_WEBHOOK else 'Polling'}"
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            status_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        
        await update.message.reply_text(status_text, parse_mode='Markdown')
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        username = update.effective_user.first_name or "–ì–æ—Å—Ç—å"
        user_states[user_id] = UserState.MAIN_MENU
        
        logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        welcome_text = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {SALON_INFO['name']}, {username}!\n\n"
            f"üåü –Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
            f"üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É\n"
            f"üìã –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã\n"
            f"üë©‚Äçüíª –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏\n\n"
            f"üìç {SALON_INFO['address']}\n"
            f"üìû {SALON_INFO['phone']}\n\n"
            f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book")],
            [InlineKeyboardButton("üìã –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data="services")],
            [InlineKeyboardButton("üë©‚Äçüíª –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞", callback_data="masters")],
            [InlineKeyboardButton("üéØ –ê–∫—Ü–∏–∏", callback_data="promotions")],
            [InlineKeyboardButton("üì± –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        logger.info(f"üîò Callback: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        try:
            if data == "services":
                await self.show_services(query)
            elif data == "book":
                await self.start_booking(query)
            elif data == "masters":
                await self.show_masters(query)
            elif data == "promotions":
                await self.show_promotions(query)
            elif data == "my_bookings":
                await self.show_user_bookings(query)
            elif data.startswith("service_"):
                await self.select_service(query, data)
            elif data.startswith("date_"):
                await self.select_date(query, data)
            elif data.startswith("time_"):
                await self.select_time(query, data)
            elif data == "back_to_menu":
                await self.back_to_main_menu(query)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
                await query.edit_message_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {data}: {e}")
            try:
                await query.edit_message_text(
                    "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
                    ]])
                )
            except:
                pass
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    async def show_services(self, query):
        text = f"üìã **–£—Å–ª—É–≥–∏ {SALON_INFO['name']}**\n\n"
        
        for service_info in SERVICES.values():
            text += f"**{service_info['name']}**\n"
            for service in service_info['services']:
                text += f"‚Ä¢ {service}\n"
            text += f"‚è± {service_info['duration']} –º–∏–Ω\n\n"
        
        text += f"üìû {SALON_INFO['phone']}\n"
        text += f"üìç {SALON_INFO['address']}"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def start_booking(self, query):
        user_id = query.from_user.id
        user_states[user_id] = UserState.SELECTING_SERVICE
        
        text = "üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:**"
        
        keyboard = [
            [InlineKeyboardButton("üíÖ –ù–æ–≥—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å", callback_data="service_nails")],
            [InlineKeyboardButton("üíá‚Äç‚ôÄÔ∏è –ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏", callback_data="service_hair")],
            [InlineKeyboardButton("üíÑ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –º–∞–∫–∏—è–∂", callback_data="service_makeup")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def select_service(self, query, callback_data):
        user_id = query.from_user.id
        service_type = callback_data.replace("service_", "")
        
        if user_id not in user_data:
            user_data[user_id] = {}
        user_data[user_id]['service_type'] = service_type
        
        service_info = SERVICES[service_type]
        text = f"**{service_info['name']}**\n\n"
        for service in service_info['services']:
            text += f"‚Ä¢ {service}\n"
        text += f"\n‚è± {service_info['duration']} –º–∏–Ω\n\n"
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç
        available_dates = []
        for i in range(1, 8):
            date = datetime.now() + timedelta(days=i)
            if date.weekday() < 6:  # –ü–Ω-–°–±
                available_dates.append(
