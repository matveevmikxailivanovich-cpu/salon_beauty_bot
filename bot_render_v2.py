# -*- coding: utf-8 -*-
"""
TELEGRAM-–ë–û–¢ –°–ê–õ–û–ù–ê –ö–†–ê–°–û–¢–´ –î–õ–Ø RENDER v2.1 FIXED
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
"""

import asyncio
import logging
import sys
import os
from datetime import datetime, timedelta
from typing import Dict, List
import sqlite3
import signal

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
    print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ telegram –Ω–∞–π–¥–µ–Ω–∞")
except ImportError:
    print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot==20.7")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Render
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', "8215198856:AAFaeNBZnrKig1tU0VR74DoCTHdrXsRKV1U")
WEBHOOK_URL = os.getenv('WEBHOOK_URL', None)
PORT = int(os.getenv('PORT', 8443))
USE_WEBHOOK = os.getenv('USE_WEBHOOK', 'false').lower() == 'true'

print("ü§ñ TELEGRAM-–ë–û–¢ –°–ê–õ–û–ù–ê –ö–†–ê–°–û–¢–´ v2.1")
print(f"üîë –¢–æ–∫–µ–Ω: {BOT_TOKEN[:20]}...")
print(f"üåê Webhook: {'–í–∫–ª—é—á–µ–Ω' if USE_WEBHOOK else '–û—Ç–∫–ª—é—á–µ–Ω'}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
shutdown_event = asyncio.Event()

class UserState:
    MAIN_MENU = "main_menu"
    SELECTING_SERVICE = "selecting_service"
    AWAITING_NAME = "awaiting_name"
    AWAITING_PHONE = "awaiting_phone"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–ª–æ–Ω–∞
SERVICES = {
    "nails": {
        "name": "üíÖ –ù–æ–≥—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å",
        "services": ["–ú–∞–Ω–∏–∫—é—Ä - 1500‚ÇΩ", "–ü–µ–¥–∏–∫—é—Ä - 2000‚ÇΩ", "–ì–µ–ª—å-–ª–∞–∫ - 1200‚ÇΩ"],
        "duration": 90
    },
    "hair": {
        "name": "üíá‚Äç‚ôÄÔ∏è –ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏", 
        "services": ["–°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è - 2500‚ÇΩ", "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ - 4500‚ÇΩ", "–£–∫–ª–∞–¥–∫–∞ - 1500‚ÇΩ"],
        "duration": 120
    },
    "makeup": {
        "name": "üíÑ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –º–∞–∫–∏—è–∂",
        "services": ["–ë—Ä–æ–≤–∏ - 8000‚ÇΩ", "–ì—É–±—ã - 12000‚ÇΩ", "–í–µ–∫–∏ - 10000‚ÇΩ"],
        "duration": 150
    }
}

MASTERS = {
    "nails": ["–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞"],
    "hair": ["–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞", "–û–ª—å–≥–∞ –ö–æ–∑–ª–æ–≤–∞"],
    "makeup": ["–°–≤–µ—Ç–ª–∞–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–∞"]
}

WORK_HOURS = list(range(9, 19))

SALON_INFO = {
    "name": "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã '–≠–ª–µ–≥–∞–Ω—Å'",
    "phone": "+7 (999) 123-45-67", 
    "address": "—É–ª. –ö—Ä–∞—Å–æ—Ç—ã, –¥–æ–º 10"
}

class Database:
    def __init__(self):
        self.db_path = os.getenv('DATABASE_PATH', '/tmp/salon_bot.db')
        self.init_db()
        logger.info(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞: {self.db_path}")
    
    def init_db(self):
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    name TEXT,
                    phone TEXT,
                    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS appointments (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    service_type TEXT,
                    master TEXT,
                    appointment_date TEXT,
                    appointment_time TEXT,
                    status TEXT DEFAULT 'active',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_appointments_date ON appointments(appointment_date)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_appointments_master ON appointments(master)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_appointments_user ON appointments(user_id)')
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise
    
    def is_user_registered(self, user_id: int) -> bool:
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            conn.close()
            return result is not None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def register_user(self, user_id: int, name: str, phone: str):
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                'INSERT OR REPLACE INTO users (user_id, name, phone) VALUES (?, ?, ?)',
                (user_id, name, phone)
            )
            conn.commit()
            conn.close()
            logger.info(f"üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} (ID: {user_id})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    def create_appointment(self, user_id: int, service_type: str, master: str, date: str, time: str):
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                'INSERT INTO appointments (user_id, service_type, master, appointment_date, appointment_time) VALUES (?, ?, ?, ?, ?)',
                (user_id, service_type, master, date, time)
            )
            appointment_id = cursor.lastrowid
            conn.commit()
            conn.close()
            logger.info(f"üìÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å #{appointment_id}: {date} {time} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return appointment_id
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
            return None
    
    def get_user_appointments(self, user_id: int) -> List[Dict]:
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                '''SELECT service_type, master, appointment_date, appointment_time 
                   FROM appointments 
                   WHERE user_id = ? AND status = "active"
                   ORDER BY appointment_date, appointment_time''',
                (user_id,)
            )
            appointments = cursor.fetchall()
            conn.close()
            
            result = []
            for apt in appointments:
                result.append({
                    'service_type': apt[0],
                    'master': apt[1],
                    'date': apt[2],
                    'time': apt[3]
                })
            return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []
    
    def is_time_available(self, master: str, date: str, time: str) -> bool:
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                '''SELECT id FROM appointments 
                   WHERE master = ? AND appointment_date = ? AND appointment_time = ? AND status = "active"''',
                (master, date, time)
            )
            result = cursor.fetchone()
            conn.close()
            return result is None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
db = Database()
user_states = {}
user_data = {}

class SalonBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        logger.info("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def setup_handlers(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ update: {context.error}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
        if update and update.effective_user:
            try:
                await context.bot.send_message(
                    chat_id=update.effective_user.id,
                    text="üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = (
            f"üÜò **–ü–æ–º–æ—â—å - {SALON_INFO['name']}**\n\n"
            f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            f"/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            f"/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            f"/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n"
            f"**–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:**\n"
            f"üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã\n"
            f"üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —É—Å–ª—É–≥ –∏ —Ü–µ–Ω\n"
            f"üë©‚Äçüíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–∞—Ö\n"
            f"üéØ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏\n"
            f"üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏\n\n"
            f"üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: {SALON_INFO['phone']}"
        )
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
            conn = sqlite3.connect(db.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM users')
            users_count = cursor.fetchone()[0]
            cursor.execute('SELECT COUNT(*) FROM appointments WHERE status = "active"')
            appointments_count = cursor.fetchone()[0]
            conn.close()
            
            status_text = (
                f"ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**\n\n"
                f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n"
                f"üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
                f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {appointments_count}\n"
                f"üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
                f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
                f"üåê –†–µ–∂–∏–º: {'Webhook' if USE_WEBHOOK else 'Polling'}"
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            status_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        
        await update.message.reply_text(status_text, parse_mode='Markdown')
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        username = update.effective_user.first_name or "–ì–æ—Å—Ç—å"
        user_states[user_id] = UserState.MAIN_MENU
        
        logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        welcome_text = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {SALON_INFO['name']}, {username}!\n\n"
            f"üåü –Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
            f"üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É\n"
            f"üìã –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã\n"
            f"üë©‚Äçüíª –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏\n\n"
            f"üìç {SALON_INFO['address']}\n"
            f"üìû {SALON_INFO['phone']}\n\n"
            f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book")],
            [InlineKeyboardButton("üìã –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data="services")],
            [InlineKeyboardButton("üë©‚Äçüíª –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞", callback_data="masters")],
            [InlineKeyboardButton("üéØ –ê–∫—Ü–∏–∏", callback_data="promotions")],
            [InlineKeyboardButton("üì± –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        logger.info(f"üîò Callback: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        try:
            if data == "services":
                await self.show_services(query)
            elif data == "book":
                await self.start_booking(query)
            elif data == "masters":
                await self.show_masters(query)
            elif data == "promotions":
                await self.show_promotions(query)
            elif data == "my_bookings":
                await self.show_user_bookings(query)
            elif data.startswith("service_"):
                await self.select_service(query, data)
            elif data.startswith("date_"):
                await self.select_date(query, data)
            elif data.startswith("time_"):
                await self.select_time(query, data)
            elif data == "back_to_menu":
                await self.back_to_main_menu(query)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
                await query.edit_message_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {data}: {e}")
            try:
                await query.edit_message_text(
                    "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
                    ]])
                )
            except:
                pass
    
    async def show_services(self, query):
        text = f"üìã **–£—Å–ª—É–≥–∏ {SALON_INFO['name']}**\n\n"
        
        for service_info in SERVICES.values():
            text += f"**{service_info['name']}**\n"
            for service in service_info['services']:
                text += f"‚Ä¢ {service}\n"
            text += f"‚è± {service_info['duration']} –º–∏–Ω\n\n"
        
        text += f"üìû {SALON_INFO['phone']}\n"
        text += f"üìç {SALON_INFO['address']}"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def show_user_bookings(self, query):
        user_id = query.from_user.id
        appointments = db.get_user_appointments(user_id)
        
        if appointments:
            text = "üì± **–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:**\n\n"
            for apt in appointments:
                service_name = SERVICES[apt['service_type']]['name']
                date_obj = datetime.strptime(apt['date'], "%Y-%m-%d")
                formatted_date = date_obj.strftime("%d.%m.%Y")
                
                text += f"‚Ä¢ {service_name}\n"
                text += f"üìÖ {formatted_date} –≤ {apt['time']}\n"
                text += f"üë©‚Äçüíª {apt['master']}\n\n"
            
            text += f"üìû –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: {SALON_INFO['phone']}"
        else:
            text = "üì± –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π\n\nüìÖ –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def back_to_main_menu(self, query):
        user_id = query.from_user.id
        user_states[user_id] = UserState.MAIN_MENU
        
        text = f"üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é {SALON_INFO['name']}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book")],
            [InlineKeyboardButton("üìã –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data="services")],
            [InlineKeyboardButton("üë©‚Äçüíª –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞", callback_data="masters")],
            [InlineKeyboardButton("üéØ –ê–∫—Ü–∏–∏", callback_data="promotions")],
            [InlineKeyboardButton("üì± –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def run_webhook(self):
        """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook"""
        try:
            if not WEBHOOK_URL:
                raise ValueError("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è webhook —Ä–µ–∂–∏–º–∞")
            
            logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook: {WEBHOOK_URL}")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
            await self.application.initialize()
            await self.application.start()
            await self.application.bot.set_webhook(url=WEBHOOK_URL)
            
            # –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞
            await self.application.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                url_path="",
                webhook_url=WEBHOOK_URL
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ webhook: {e}")
            raise
    
    async def run_polling(self):
        """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling")
            
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling(
                drop_pending_updates=True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                allowed_updates=['message', 'callback_query']
            )
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã
            while not shutdown_event.is_set():
                await asyncio.sleep(60)
                logger.info("üîÑ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç...")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling: {e}")
            raise
        finally:
            await self.application.stop()
            await self.application.shutdown()
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        try:
            logger.info("ü§ñ –ë–û–¢ –ó–ê–ü–£–©–ï–ù –ù–ê RENDER!")
            logger.info("üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ Telegram")
            logger.info(f"üåê –†–µ–∂–∏–º: {'Webhook' if USE_WEBHOOK else 'Polling'}")
            
            if USE_WEBHOOK:
                await self.run_webhook()
            else:
                await self.run_polling()
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info(f"üì∂ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    shutdown_event.set()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGINT, signal_handler)
        
        logger.info("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞ –¥–ª—è Render...")
        logger.info(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}")
        logger.info(f"üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
        logger.info(f"üíæ –ü—É—Ç—å –∫ –ë–î: {os.getenv('DATABASE_PATH', '/tmp/salon_bot.db')}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if not BOT_TOKEN or BOT_TOKEN == "YOUR_BOT_TOKEN":
            raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot = SalonBot()
        await bot.run()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ main(): {e}")
        sys.exit(1)
    finally:
        logger.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")

if __name__ == '__main__':
    logger.info("üöÄ –°–¢–ê–†–¢ TELEGRAM-–ë–û–¢–ê –ù–ê RENDER...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    try:
        import telegram
        logger.info(f"‚úÖ python-telegram-bot –≤–µ—Ä—Å–∏—è: {telegram.__version__}")
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ telegram: {e}")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def start_booking(self, query):
        user_id = query.from_user.id
        user_states[user_id] = UserState.SELECTING_SERVICE
        
        text = "üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:**"
        
        keyboard = [
            [InlineKeyboardButton("üíÖ –ù–æ–≥—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å", callback_data="service_nails")],
            [InlineKeyboardButton("üíá‚Äç‚ôÄÔ∏è –ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏", callback_data="service_hair")],
            [InlineKeyboardButton("üíÑ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –º–∞–∫–∏—è–∂", callback_data="service_makeup")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def select_service(self, query, callback_data):
        user_id = query.from_user.id
        service_type = callback_data.replace("service_", "")
        
        if user_id not in user_data:
            user_data[user_id] = {}
        user_data[user_id]['service_type'] = service_type
        
        service_info = SERVICES[service_type]
        text = f"**{service_info['name']}**\n\n"
        for service in service_info['services']:
            text += f"‚Ä¢ {service}\n"
        text += f"\n‚è± {service_info['duration']} –º–∏–Ω\n\n"
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
        available_dates = []
        for i in range(1, 8):
            date = datetime.now() + timedelta(days=i)
            if date.weekday() < 6:  # –ü–Ω-–°–±
                available_dates.append(date)
        
        if available_dates:
            text += "üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:**"
            keyboard = []
            for date in available_dates:
                date_str = date.strftime("%Y-%m-%d")
                date_display = date.strftime("%d.%m (%a)")
                days = {'Mon': '–ü–Ω', 'Tue': '–í—Ç', 'Wed': '–°—Ä', 'Thu': '–ß—Ç', 'Fri': '–ü—Ç', 'Sat': '–°–±'}
                for eng, rus in days.items():
                    date_display = date_display.replace(eng, rus)
                keyboard.append([InlineKeyboardButton(date_display, callback_data=f"date_{date_str}")])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="book")])
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            text += "‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç**"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def select_date(self, query, callback_data):
        user_id = query.from_user.id
        selected_date = callback_data.replace("date_", "")
        user_data[user_id]['date'] = selected_date
        
        service_type = user_data[user_id]['service_type']
        masters = MASTERS[service_type]
        
        date_obj = datetime.strptime(selected_date, "%Y-%m-%d")
        formatted_date = date_obj.strftime("%d.%m.%Y")
        
        text = f"üìÖ **{formatted_date}**\n‚è∞ **–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:**"
        
        keyboard = []
        for hour in WORK_HOURS:
            time_str = f"{hour:02d}:00"
            available = any(db.is_time_available(master, selected_date, time_str) for master in masters)
            if available:
                keyboard.append([InlineKeyboardButton(time_str, callback_data=f"time_{time_str}")])
        
        if keyboard:
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"service_{service_type}")])
        else:
            text += "\n‚ùå **–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏**"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"service_{service_type}")]]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def select_time(self, query, callback_data):
        user_id = query.from_user.id
        selected_time = callback_data.replace("time_", "")
        user_data[user_id]['time'] = selected_time
        
        if not db.is_user_registered(user_id):
            user_states[user_id] = UserState.AWAITING_NAME
            
            text = (
                f"üìù **–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω—É–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è**\n\n"
                f"üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
            )
            await query.edit_message_text(text, parse_mode='Markdown')
        else:
            await self.confirm_booking(query)
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        text = update.message.text
        
        if user_id not in user_states:
            await self.start_command(update, context)
            return
        
        state = user_states[user_id]
        
        try:
            if state == UserState.AWAITING_NAME:
                user_data[user_id]['name'] = text.strip()
                user_states[user_id] = UserState.AWAITING_PHONE
                
                await update.message.reply_text(
                    f"üëç –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {text}!\nüìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
                )
            
            elif state == UserState.AWAITING_PHONE:
                user_data[user_id]['phone'] = text.strip()
                
                db.register_user(user_id, user_data[user_id]['name'], user_data[user_id]['phone'])
                await self.complete_booking(update)
            
            else:
                # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.message.reply_text(
                    "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
                    ]])
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç {user_id}: {e}")
            await update.message.reply_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
    
    async def confirm_booking(self, query):
        user_id = query.from_user.id
        await self._finalize_booking(user_id, query)
    
    async def complete_booking(self, update):
        user_id = update.effective_user.id
        await self._finalize_booking(user_id, update)
        user_states[user_id] = UserState.MAIN_MENU
    
    async def _finalize_booking(self, user_id, update_or_query):
        try:
            service_type = user_data[user_id]['service_type']
            date = user_data[user_id]['date']
            time = user_data[user_id]['time']
            
            masters = MASTERS[service_type]
            available_master = None
            for master in masters:
                if db.is_time_available(master, date, time):
                    available_master = master
                    break
            
            if available_master:
                appointment_id = db.create_appointment(user_id, service_type, available_master, date, time)
                
                date_obj = datetime.strptime(date, "%Y-%m-%d")
                formatted_date = date_obj.strftime("%d.%m.%Y")
                
                text = (
                    f"üéâ **–ó–ê–ü–ò–°–¨ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!**\n\n"
                    f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {time}\n"
                    f"üë©‚Äçüíª –ú–∞—Å—Ç–µ—Ä: {available_master}\n"
                    f"üíÖ –£—Å–ª—É–≥–∞: {SERVICES[service_type]['name']}\n\n"
                    f"üìç {SALON_INFO['address']}\n"
                    f"üìû {SALON_INFO['phone']}\n\n"
                    f"‚ú® –ñ–¥–µ–º –≤–∞—Å!"
                )
                
                if appointment_id:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∑–∞–ø–∏—Å—å #{appointment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                text = "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
                logger.warning(f"‚ö†Ô∏è –í—Ä–µ–º—è {date} {time} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if hasattr(update_or_query, 'edit_message_text'):
                await update_or_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
            else:
                await update_or_query.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è {user_id}: {e}")
            error_text = "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if hasattr(update_or_query, 'edit_message_text'):
                await update_or_query.edit_message_text(error_text, reply_markup=reply_markup)
            else:
                await update_or_query.message.reply_text(error_text, reply_markup=reply_markup)
    
    async def show_masters(self, query):
        text = f"üë©‚Äçüíª **–ú–∞—Å—Ç–µ—Ä–∞ {SALON_INFO['name']}:**\n\n"
        
        for service_type, masters in MASTERS.items():
            service_name = SERVICES[service_type]['name']
            text += f"**{service_name}:**\n"
            for master in masters:
                text += f"‚Ä¢ {master}\n"
            text += "\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def show_promotions(self, query):
        text = (
            f"üéØ **–ê–∫—Ü–∏–∏ {SALON_INFO['name']}:**\n\n"
            f"üåü –°–∫–∏–¥–∫–∞ 20% –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ\n"
            f"üíÖ –ú–∞–Ω–∏–∫—é—Ä + –ø–µ–¥–∏–∫—é—Ä = —Å–∫–∏–¥–∫–∞ 15%\n"
            f"üëØ‚Äç‚ôÄÔ∏è –ü—Ä–∏–≤–µ–¥–∏ –ø–æ–¥—Ä—É–≥—É - —Å–∫–∏–¥–∫–∞ 10%\n"
            f"üéÇ –í –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è - —Å–∫–∏–¥–∫–∞ 25%\n\n"
            f"üìû –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {SALON_INFO['phone']}"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥
